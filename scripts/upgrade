#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --time --weight=1

app=$YNH_APP_INSTANCE_NAME

path_url=$(ynh_app_setting_get --app="$app" --key=path)
is_public=$(ynh_app_setting_get --app="$app" --key=is_public)
final_path=$(ynh_app_setting_get --app="$app" --key=final_path)
db_name=$(ynh_app_setting_get --app="$app" --key=db_name)
db_user=$db_name
domain=$(ynh_app_setting_get --app="$app" --key=domain)
db_pwd=$(ynh_app_setting_get --app="$app" --key=psqlpwd)
admin=$(ynh_app_setting_get --app="$app" --key=admin)
admin_mail=$(ynh_user_get_info "$admin" mail)
github_account=$(ynh_app_setting_get --app="$app" --key=github_account)
github_token=$(ynh_app_setting_get --app="$app" --key=github_token)
key=$(ynh_string_random 50)
redis_db=$(ynh_app_setting_get --app="$app" --key=redis_db)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --time --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --time --weight=1

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

if [[ -d "$final_path/bin/" ]]
then
	ynh_secure_remove --file="$final_path/bin/"
fi

# (<3.8) log cleanups
if [[ -e "/var/log/uwsgi/app/$app" ]]
then
    ynh_systemd_action --service_name="$app" --action="stop"
    ynh_systemd_action --service_name="$app-celery" --action="stop"
	ynh_secure_remove --file="/var/log/uwsgi/app/$app"
	ynh_secure_remove --file="/var/log/$app-celery"
fi

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path --path_url=$path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping systemd services..." --time --weight=1

ynh_systemd_action --service_name="$app" --action="stop"
ynh_systemd_action --service_name="$app-celery" --action="stop"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# Update dependencies
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --time --weight=1

ynh_exec_warn_less ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a system user
ynh_system_user_create --username="$app" --home_dir="$final_path" --use_shell

#=================================================
# CONFIGURE HUB
#=================================================
ynh_script_progression --message="Configure hub..." --time --weight=1

mkdir -p "$final_path/.config/"
cp ../conf/hub_config "$final_path/.config/hub"
ynh_replace_string --match_string="__GITHUBUSER__" --replace_string="$github_account" --target_file="$final_path/.config/hub"
ynh_replace_string --match_string="__GITHUBTOKEN__" --replace_string="$github_token" --target_file="$final_path/.config/hub"

cat <<EOF > "$final_path/.bashrc"
eval "$(hub alias -s /bin/bash)"
EOF

#=================================================
# SPECIFIC SETUP UWSGI
#=================================================
ynh_script_progression --message="Configure uwsgi..." --time --weight=1

finaluwsgiini="/etc/uwsgi/apps-available/$app.ini"
ynh_backup_if_checksum_is_different --file="$finaluwsgiini"
cp ../conf/uwsgi.ini "$finaluwsgiini"

ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$finaluwsgiini"
ynh_replace_string --match_string="__PATH__" --replace_string="$path_url" --target_file="$finaluwsgiini"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$finaluwsgiini"
ynh_replace_string --match_string="__PYTHONPATH__" --replace_string="$weblate_pypath" --target_file="$finaluwsgiini"

ynh_store_file_checksum --file="$finaluwsgiini"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --time --weight=1

ynh_add_systemd_config --service="$app" --template="weblate.service"

#=================================================
# ACTIVATE CELERY
#=================================================
ynh_script_progression --message="Configure celery..." --time --weight=1

celeryconf="$final_path/celery-weblate"
cp ../conf/celery-weblate "$celeryconf"

ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$celeryconf"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$celeryconf"

ynh_add_systemd_config --service="$app-celery" --template="celery-weblate.service"

#=================================================
# UPGRADE WEBLATE
#=================================================

upgrade() {
	new_version=$1
	settings_template=$2
	#=================================================
	# PIP INSTALLATION
	#=================================================
	ynh_script_progression --message="Install weblate using PIP..." --time --weight=1

	ynh_systemd_action --service_name="$app-celery" --action="stop"

	virtualenv --python=python3 "${final_path}/venv"
	chown -R "$app": "$final_path/venv"

	#run source in a 'sub shell'
	(
		set +o nounset
		source "${final_path}/venv/bin/activate"
		set -o nounset
		sudo -u $app $final_path/venv/bin/pip install --upgrade pip setuptools wheel
		# Still needed with latest version of weblate?
		sudo -u $app $final_path/venv/bin/pip install --upgrade Weblate=="$new_version"
		sudo -u $app $final_path/venv/bin/pip install psycopg2-binary ruamel.yaml aeidon phply
		#pip install pytz python-bidi PyYaML Babel pyuca pylibravatar py3dns psycopg2-binary phply django-redis hiredis aeidon ruamel.yaml
		# specific to YunoHost package:
		sudo -u $app $final_path/venv/bin/pip install django_sendmail_backend
	)

	#=================================================
	# MODIFY A CONFIG FILE
	#=================================================
	ynh_script_progression --message="Create weblate configuration file..."
	# save old settings file
	settings="$final_path/venv/lib/$weblate_pypath/site-packages/weblate/settings.py"

	ynh_backup_if_checksum_is_different --file="$settings"
	cp "$settings_template" "$settings"

	ynh_replace_string --match_string="__NAME__" --replace_string="$app" --target_file="$settings"
	ynh_replace_string --match_string="__DB_PWD__" --replace_string="$db_pwd" --target_file="$settings"
	ynh_replace_string --match_string="__ADMIN__" --replace_string="$admin" --target_file="$settings"
	ynh_replace_string --match_string="__ADMINMAIL__" --replace_string="$admin_mail" --target_file="$settings"
	ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$settings"
	ynh_replace_string --match_string="__KEY__" --replace_string="$key" --target_file="$settings"
	ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$settings"
	ynh_replace_string --match_string="__GITHUBUSER__" --replace_string="$github_account" --target_file="$settings"
	ynh_replace_string --match_string="__GITHUBTOKEN__" --replace_string="$github_token" --target_file="$settings"
	ynh_replace_string --match_string="__REDIS_DB__" --replace_string="$redis_db" --target_file="$settings"
	ynh_replace_string --match_string="__PYTHONPATH__" --replace_string="$weblate_pypath" --target_file="$settings"

	# remove last "/" of $path_url
	ynh_replace_string --match_string="__PATHURL__" --replace_string="${path_url%/}" --target_file="$settings"

	ynh_app_setting_set --app="$app" --key=redis_db --value="$redis_db"

	# Recalculate and store the config file checksum into the app settings
	ynh_store_file_checksum --file="$settings"

	touch "$final_path/local_settings.py"
	ln -sf "$final_path/local_settings.py" "$final_path/venv/lib/$weblate_pypath/site-packages/weblate/local_settings.py"

	#=================================================
	# MIGRATE WEBLATE
	#=================================================
	ynh_script_progression --message="Run migration scripts..." --time --weight=1

	ynh_systemd_action --service_name="$app-celery" --action="start"

	(
		set +o nounset
		source "${final_path}/venv/bin/activate"
		set -o nounset
		export DJANGO_SETTINGS_MODULE="weblate.settings"
		cd "${final_path}"

		sudo -u $app $final_path/venv/bin/weblate migrate --noinput
		sudo -u $app $final_path/venv/bin/weblate collectstatic --noinput
		sudo -u $app $final_path/venv/bin/weblate setuplang
		sudo -u $app $final_path/venv/bin/weblate setupgroups
		sudo -u $app $final_path/venv/bin/weblate compilemessages
		
		# Check the configuration
		# This may fail in some cases with errors, etc., but the app works and the user can fix issues later.
		if [ "$new_version" -eq "$weblate_version" ]; then
			sudo -u $app $final_path/venv/bin/weblate check --deploy || true
		fi
	)
}

file_version="${final_path}/venv/lib/$weblate_pypath/site-packages/weblate/__init__.py"
if [ -e $file_version ]
then
	current_version=$(cat $file_version | grep "^VERSION = " | grep -o "[0-9].[0-9]" | head -n1 | cut -d"." -f1)
else
	current_version=3
fi

ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS pg_trgm;" --database=$db_name

if [ "$current_version" -lt "4" ]
then
	upgrade "4.1.1" "../conf/settings.4.1.1.py"
fi

upgrade $weblate_version "../conf/settings.py"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --time --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --time --weight=1

yunohost service add "$app" --log "/var/log/$app/weblate.log"
yunohost service add "$app-celery" --log "/var/log/$app/weblate-celery-w1.log"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set right permissions for curl installation
chown -R "$app": "$final_path"

mkdir -p "$final_path/avatar-cache"
chown -R "$app": "$final_path/avatar-cache"

#=================================================
# START SYSTEMD SERVICES
#=================================================
ynh_script_progression --message="Starting systemd services..." --time --weight=1

ynh_systemd_action --service_name="$app" --action="start"
ynh_systemd_action --service_name="$app-celery" --action="start"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..." --time --weight=1

# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set --app="$app" --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --time --last