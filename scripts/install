#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
set -eu
source _common.sh
source /usr/share/yunohost/helpers
source _future.sh

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
github_account=$YNH_APP_ARG_GITHUB_ACCOUNT
github_token=$YNH_APP_ARG_GITHUB_TOKEN

# This is a multi-instance app, meaning it can be installed several times independently
# The id of the app as stated in the manifest is available as $YNH_APP_ID
# The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
# The app instance name is available as $YNH_APP_INSTANCE_NAME
#    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
#    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
#    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
# The app instance name is probably what you are interested the most, since this is
# guaranteed to be unique. This is a good unique identifier to define installation path,
# db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path "$path_url")

# Check web path availability
ynh_webpath_available "$domain" "$path_url"
# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

mkdir -p "$final_path"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" admin "$admin"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" final_path "$final_path"
ynh_app_setting_set "$app" github_account "$github_account"
ynh_app_setting_set "$app" github_token "$github_token"

#=================================================
# STANDARD MODIFICATIONS
#=================================================

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies libxml2-dev libxslt-dev libfreetype6-dev \
	libjpeg-dev libz-dev libyaml-dev python3-dev python3-pip python3-virtualenv python-virtualenv \
	postgresql libpq-dev uwsgi uwsgi-plugin-python3 memcached

#=================================================
# CREATE A PostgreSQL DATABASE
#=================================================

ynh_psql_test_if_first_run

db_name=$(ynh_sanitize_dbid "$app")
db_user_pwd=$(ynh_string_random)
# Initialize database and store postgres password for upgrade
ynh_psql_create_db "$db_name" "$app" "$db_user_pwd"
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" psqlpwd "$db_user_pwd"

systemctl reload postgresql

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

if [ "$path_url" == "/" ]
then
	# $finalnginxconf comes from ynh_add_nginx_config
	ynh_replace_string "location //"      "location /"        "$finalnginxconf"

	# ynh panel is only comptable with non-root installation
	ynh_replace_string "	include conf.d/"  "	#include conf.d/"  "$finalnginxconf"

	ynh_store_file_checksum "$finalnginxconf"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================

# Hub needs a home directory with a config file
ynh_system_user_create "$app" "$final_path"
# Allow bash for our user, so he can use Hub
chsh --shell /bin/bash "$app"

#=================================================
# Download and install hub
#=================================================

arch=$(dpkg --print-architecture)
# Rasberry Pi: Debian armhf (ARM hard float) refers to the ARMv7
[[ $arch = "armhf" ]] && arch="arm"

version="hub-linux-${arch}-2.3.0-pre10"
file_bin="hub-linux-${arch}-2.3.0-pre10.tgz"
wget --quiet "https://github.com/github/hub/releases/download/v2.3.0-pre10/${file_bin}"

case "$arch" in
"386")
	sha256sum="08e29a118577b57f962c7c6e4c2e4bfc72b23df1469f2339631c55454893e24f"
	;;
"amd64")
	sha256sum="015297eb81e8fe11f3989d8f65c213111e508cecf0e9de8af1b7741de2077320"
	;;
"arm")
	sha256sum="a05cd6a42c973177c2a0b457451e9eef0035be67c666e4beebe3b9ed6d526f3d"
	;;
"arm64")
	sha256sum="6d845601196ef26342b8bafa9ab6e98c88270fb6dad60e0915396ba5486d0c76"
	;;
*)
	sha256sum="-1"
	;;
esac

[[ $(sha256sum "$file_bin" | cut -d' ' -f1) = "$sha256sum" ]] || ynh_die "Hub's sha256sum failed (arch: ${arch})"

tar --extract --file "$file_bin" "$version/bin/hub"
mkdir "$final_path/bin/"
mv "$version/bin/hub" "$final_path/bin/"

mkdir "$final_path/.config/"
cp ../conf/hub_config "$final_path/.config/hub"
ynh_replace_string "__GITHUBUSER__"  "$github_account" "$final_path/.config/hub"
ynh_replace_string "__GITHUBTOKEN__" "$github_token"   "$final_path/.config/hub"

cat <<EOF > "$final_path/.bashrc"
alias git=hub
PATH="\$PATH:$final_path/bin"
EOF

#=================================================
# SPECIFIC SETUP
#=================================================
# SPECIFIC SETUP uwsgi
#=================================================

ynh_add_uwsgi_service

#=================================================
# PIP INSTALLATION
#=================================================
virtualenv --python=python3 "${final_path}/venv"
#run source in a 'sub shell'
(
	set +o nounset
	source "${final_path}/venv/bin/activate"
	set -o nounset
	pip install --upgrade pip
	pip install Weblate=="$current_version"
	pip install python-bidi PyYaML Babel pyuca pylibravatar py3dns psycopg2 python-memcached
	# specific to YunoHost package:
	pip install django_sendmail_backend
)

#=================================================
# SPECIFIC SETUP settings.py
# https://docs.weblate.org/en/latest/admin/install.html#installation
# TODO: use --extra-search-dir=/path/to/dists
#=================================================
db_pwd=$(ynh_app_setting_get "$app" psqlpwd)
admin_mail=$(ynh_user_get_info "$admin" mail)
key=$(ynh_string_random)
memc_port=$(ynh_find_port 8080)
settings="$final_path/venv/lib/python3.4/site-packages/weblate/settings.py"
cp "../conf/settings_history/settings.$current_version.py" "$settings"

weblate_fill_settings "$settings"
ynh_app_setting_set "$app" memc_port "$memc_port"

#=================================================
# SPECIFIC SETUP Filling up the database
# https://docs.weblate.org/en/latest/admin/install.html#filling-up-the-database
#==========================================
(
	set +o nounset
	source "${final_path}/venv/bin/activate"
	set -o nounset
	export DJANGO_SETTINGS_MODULE="weblate.settings"
	# the user needs to be weblate for postgresql
	weblate migrate --noinput
	# generate static files
	weblate collectstatic --noinput
	weblate changesite --set-name "$domain"
	weblate createadmin --no-color \
		--password "weblate" \
		--username "$admin" \
		--email "$admin_mail"
)

#=================================================
# SETUP CRON
#=================================================
cp ../conf/cron "/etc/cron.d/$app"
ynh_replace_string "__FINALPATH__" "$final_path/" "/etc/cron.d/$app"

#=================================================
# STORE THE CHECKSUM OF THE CONFIG FILE
#=================================================

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/venv/lib/python3.4/site-packages/weblate/settings.py"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R "$app": "$final_path"

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set "$app" unprotected_uris "/"

	# ynh panel is not needed
	ynh_replace_string "	include conf.d/"  "	#include conf.d/"  "$finalnginxconf"

	ynh_store_file_checksum "$finalnginxconf"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
